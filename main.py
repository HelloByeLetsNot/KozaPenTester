import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox
import threading
import queue
import requests
import socket
import time

# Function to scan directories
def scan_directories(base_url, keywords, result_queue, progress_log):
    for keyword in keywords:
        url = f"{base_url}/{keyword.strip()}"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                result_queue.put(url)
                progress_log.insert(tk.END, f"Found: {url}\n")
            else:
                progress_log.insert(tk.END, f"Checked: {url} - Not Found\n")
        except requests.RequestException as e:
            progress_log.insert(tk.END, f"Error checking {url}: {e}\n")

# Function to load keyword list
def load_keyword_list():
    file_path = filedialog.askopenfilename()
    if file_path:
        with open(file_path, 'r') as file:
            keywords = file.readlines()
        keyword_list.set(f"Loaded {len(keywords)} keywords")
        return keywords
    return []

# Function to start directory scanning
def start_scan():
    base_url = url_entry.get()
    if not base_url:
        messagebox.showerror("Input Error", "Please enter a URL")
        return

    keywords = load_keyword_list()
    if not keywords:
        messagebox.showerror("Input Error", "Please upload a keyword list")
        return

    progress_log.insert(tk.END, f"Starting scan on {base_url}...\n")
    result_queue = queue.Queue()

    scan_thread = threading.Thread(target=scan_directories, args=(base_url, keywords, result_queue, progress_log))
    scan_thread.start()

# Function to ping an IP address
def ping_ip():
    ip = ip_entry.get()
    if not ip:
        messagebox.showerror("Input Error", "Please enter an IP address")
        return

    progress_log.insert(tk.END, f"Pinging {ip}...\n")
    try:
        response = os.system(f"ping -c 1 {ip}")
        if response == 0:
            progress_log.insert(tk.END, f"{ip} is reachable\n")
        else:
            progress_log.insert(tk.END, f"{ip} is not reachable\n")
    except Exception as e:
        progress_log.insert(tk.END, f"Error pinging {ip}: {e}\n")

# Function to scan open ports
def scan_ports():
    ip = ip_entry.get()
    if not ip:
        messagebox.showerror("Input Error", "Please enter an IP address")
        return

    progress_log.insert(tk.END, f"Scanning ports on {ip}...\n")
    for port in range(1, 1024):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            progress_log.insert(tk.END, f"Port {port} is open on {ip}\n")
        sock.close()

# Creating the GUI
root = tk.Tk()
root.title("Website Directory Scanner")

url_label = tk.Label(root, text="Website URL:")
url_label.pack(pady=5)
url_entry = tk.Entry(root, width=50)
url_entry.pack(pady=5)

keyword_list = tk.StringVar()
keyword_list_label = tk.Label(root, textvariable=keyword_list)
keyword_list_label.pack(pady=5)

load_button = tk.Button(root, text="Load Keyword List", command=load_keyword_list)
load_button.pack(pady=5)

scan_button = tk.Button(root, text="Start Scan", command=start_scan)
scan_button.pack(pady=5)

ip_label = tk.Label(root, text="IP Address:")
ip_label.pack(pady=5)
ip_entry = tk.Entry(root, width=50)
ip_entry.pack(pady=5)

ping_button = tk.Button(root, text="Ping IP", command=ping_ip)
ping_button.pack(pady=5)

port_button = tk.Button(root, text="Scan Ports", command=scan_ports)
port_button.pack(pady=5)

progress_label = tk.Label(root, text="Progress Log:")
progress_label.pack(pady=5)
progress_log = scrolledtext.ScrolledText(root, width=70, height=20)
progress_log.pack(pady=5)

root.mainloop()